#
#		Makefile のターゲット依存部（gr_peach用）
#

#
#  ボード名の定義
#
BOARD = GR-PEACH

#
#  Coreの種類の定義
#
CORE_TYPE = CA9

#
#  実行形態
#
ifndef EXECUTE_ON
EXECUTE_ON = ROM
endif

#
#  コンパイルオプション
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR)
COPTS := $(COPTS) -mlittle-endian
# LDFLAGS := $(LDFLAGS) -mlittle-endian -nostartfiles --specs=nano.specs -e start
CDEFS := $(CDEFS) -DTOPPERS_RZA1H
CFG1_OUT_LDFLAGS := -nostdlib $(CFG1_OUT_LDFLAGS)

#
#  カーネルに関する定義
#
KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR)
KERNEL_COBJS := $(KERNEL_COBJS) target_config.o pl310.o
# //mituhiromatuura
KERNEL_COBJS += tlsf.o
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) target_support.o 

#
#   ROM実行とRAM実行で設定が異なる事項
#
ifeq ($(EXECUTE_ON),ROM)
KERNEL_COBJS := $(KERNEL_COBJS) sf_boot.o
CDEFS := $(CDEFS) -DTOPPERS_EXECUTE_ON_ROM
else
CDEFS := $(CDEFS) -DTOPPERS_EXECUTE_ON_RAM
endif


#
#  システムサービスに関する定義
#
SYSSVC_DIR := $(SYSSVC_DIR) 
SYSSVC_COBJS := $(SYSSVC_COBJS) chip_serial.o scif.o

ifeq ($(SAFEG),SECURE)
SYSSVC_COBJS := $(SYSSVC_COBJS) safeg_load.o
endif

#
#  トレースログ記録のサンプルコードに関する定義
#
ifeq ($(ENABLE_TRACE),true)
      COPTS := $(COPTS) -DTOPPERS_ENABLE_TRACE
      KERNEL_DIR := $(KERNEL_DIR) $(SRCDIR)/arch/logtrace
      KERNEL_COBJS := $(KERNEL_COBJS) trace_config.o trace_dump.o
endif

#
#  GNU開発環境のターゲットアーキテクチャの定義
#
ifneq ($(USE_TRUESTUDIO),true)
GCC_TARGET = arm-none-eabi
else
# use GCC bundled in TrueSTUDIO
GCC_TARGET = arm-atollic-eabi
endif

#
#  各セグメントの開始アドレスの定義（それぞれ1MByte）
#
# ifeq ($(SAFEG),SECURE)
# TEXT_START_ADDRESS=0x16000000
# DATA_START_ADDRESS=0x16100000
# else
# ifeq ($(SAFEG),NONSECURE)
# TEXT_START_ADDRESS=0x15000000
# DATA_START_ADDRESS=0x15100000
# else
# TEXT_START_ADDRESS=0x10000000
# DATA_START_ADDRESS=0x10100000
# endif
# endif

#
#  リンカスクリプトの定義
#
ifndef LDSCRIPT
       ifeq ($(EXECUTE_ON),RAM)
       LDSCRIPT = $(TARGETDIR)/gr_peach_ram.ld
       else
       LDSCRIPT = $(TARGETDIR)/gr_peach_rom.ld
       endif
endif       

#
#  スタートアップモジュールに関する定義
#
#  gr_peach.ldに「STARTUP(start.o)」を記述したため，スタートアップモジュー
#  ルの名前をHIDDEN_OBJSに定義する．
#
#HIDDEN_ASMOBJS = start.o
#HIDDEN_COBJS = bootload.o
HIDDEN_COBJS = 

HIDDEN_OBJS = $(HIDDEN_ASMOBJS) $(HIDDEN_COBJS)

$(HIDDEN_ASMOBJS): %.o: %.S
	$(CC) -c $(CFLAGS) $(KERNEL_CFLAGS) $<

$(HIDDEN_ASMOBJS:.o=.d): %.d: %.S
	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) \
		-O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend

$(HIDDEN_COBJS): %.o: %.c
	$(CC) -c $(CFLAGS) $(KERNEL_CFLAGS) $<

$(HIDDEN_COBJS:.o=.d): %.d: %.c
	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) \
		-O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend

#
#  依存関係の定義
#
kernel_cfg.timestamp: $(TARGETDIR)/target.tf
$(OBJFILE): $(TARGETDIR)/target_check.tf

# 
#  オフセットファイル生成のための定義 
# 
OFFSET_TF := $(TARGETDIR)/target_offset.tf

#
#  チップ依存部のインクルード
#
include $(SRCDIR)/arch/arm_gcc/rza1/Makefile.chip

#
#  フラッシュへの書き込み
#
OPENOCD_DIR  = /Applications/GNU\ ARM\ Eclipse/OpenOCD/0.10.0-201601101000-dev
OPENOCD_PATH = ${OPENOCD_DIR}/bin/openocd
OPENOCD_SCRIPT_PATH = ${OPENOCD_DIR}/scripts
OPENOCD_SCRIPT1  = ${OPENOCD_DIR}/scripts/interface/cmsis-dap.cfg
OPENOCD_SCRIPT2  = ${OPENOCD_DIR}/scripts/target/renesas_rza1h_swd.cfg 
GDB = arm-none-eabi-gdb

ifeq ($(EXECUTE_ON),RAM)
	GDBINI = gdb_ram.ini
else
	GDBINI = gdb_rom.ini
endif

ocd: $(OBJNAME).bin
#	cygstart `cygpath -u "$(OPENOCD_PATH)"` '-s "$(OPENOCD_SCRIPT_PATH)"' '-f "$(OPENOCD_SCRIPT1)"' '-f "$(OPENOCD_SCRIPT2)"'
	osascript -e 'tell app "Terminal" do script "$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT1)" -f "$(OPENOCD_SCRIPT2)" end tell'

db: $(OBJNAME).bin
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/${GDBINI}

